#!/usr/bin/env python
"""
Usage:
    qc-fmri <nifti> <prefix>

    nifti -- input fMRI NIFTI file
    prefix -- output prefix

    Calculates and writes:
        + Signal-to-fluctuation noise ratio (SFNR) [1]
        + Mean and SD of normalized spectra across brain
        + Framewise displacement (mm/TR) of head motion (FD) [2]
        + Mean global correlation from the in-brain voxels
        + A collection of metrics from the qascripts package

    This pipeline produces multiple outputs:
        <prefix>_sfnr.nii.gz
        <prefix>_corr.nii.gz
        <prefix>_spectra.csv
        <prefix>_fd.csv
        <prefix>_stats.csv
        <prefix>_qascripts_bold.csv

    NB: FD thresholds set to 0.2 mm with an assumed head radius of 50 mm.

[1] Friedman et al. Reducing interscanner variability of activation in a
    multicenter fMRI study: controlling for signal-to-fluctuation-noise-ratio
    (SFNR) differences. Neuroimage. 2006 Nov 1;33(2):471-81.
[2] Power et al. Spurious but systematic correlations in functional
    connectivity MRI networks arise from subject motion. Neuroimage. 2012 Feb 1;
    59(3): 2142-2154.
"""

import os, sys
import tempfile
import shutil
import logging
import qcmon as qc
import numpy as np
import scipy as sp
import scipy.signal as sig
import nibabel as nib

logging.basicConfig(level=logging.INFO, format="[%(name)s] %(levelname)s: %(message)s")
logger = logging.getLogger(os.path.basename(__file__))

def main(nifti, prefix):

    logging.info('Starting')

    # add qascript to path
    qascriptsPath = os.path.join(os.path.dirname(os.path.realpath(__file__)), os.pardir, 'assets/qascripts_version2')
    os.environ['PATH'] += os.pathsep + qascriptsPath

    # pre-processing
    logging.info('Running AFNI pre-processing suite')
    tmpdir = tempfile.mkdtemp(prefix='qc-')
    qc.utilities.run('3dvolreg -prefix {t}/mcorr.nii.gz -twopass -twoblur 3 -Fourier -1Dfile {t}/motion.1D {nifti}'.format(t=tmpdir, nifti=nifti))
    qc.utilities.run('3dTstat -prefix {t}/mean.nii.gz {t}/mcorr.nii.gz'.format(t=tmpdir))
    qc.utilities.run('3dAutomask -prefix {t}/mask.nii.gz -clfrac 0.5 -peels 3 {t}/mean.nii.gz'.format(t=tmpdir))

    # sfnr
    logging.info('Running AFNI SFNR computations')
    qc.utilities.run('3dTstat -prefix {t}/std.nii.gz  -stdev {t}/mcorr.nii.gz'.format(t=tmpdir))
    qc.utilities.run("""3dcalc -prefix {prefix}_sfnr.nii.gz -a {t}/mean.nii.gz -b {t}/std.nii.gz -expr 'a/b'""".format(prefix=prefix, t=tmpdir))
    sfnr = qc.utilities.load_masked_data('{prefix}_sfnr.nii.gz'.format(prefix=prefix), '{t}/mask.nii.gz'.format(t=tmpdir))
    sfnr = np.mean(sfnr)

    # spectra
    logging.info('Running spectra')
    func = qc.utilities.load_masked_data('{t}/mcorr.nii.gz'.format(t=tmpdir), '{t}/mask.nii.gz'.format(t=tmpdir))
    spec = sig.detrend(func, type='linear')
    spec = sig.periodogram(spec, fs=0.5, return_onesided=True, scaling='density')
    spec = np.vstack((spec[0], np.nanmean(spec[1], axis=0), np.nanstd(spec[1], axis=0)))
    np.savetxt(prefix + '_spectra.csv', spec.T, header='freq,mean,sd', delimiter=',')

    # framewise displacement, doi: 10.1016/j.neuroimage.2011.10.018
    logging.info('Frame-wise displacement')
    headRadius = 50   # assumed (in mm), for deg to rad conversion
    fdThreshold = 0.2 # fd threshold in mm
    fd = np.genfromtxt('{t}/motion.1D'.format(t=tmpdir))
    fd[:,0] = np.radians(fd[:,0]) * headRadius
    fd[:,1] = np.radians(fd[:,1]) * headRadius
    fd[:,2] = np.radians(fd[:,2]) * headRadius
    fd = np.abs(np.diff(fd, n=1, axis=0))
    fd = np.sum(fd, axis=1)
    numBadFd = len(np.where(fd > fdThreshold)[0])
    pctBadFd = numBadFd / float(len(fd))

    # write FD out as a two-column .csv file, including the TR number
    logging.info('Writing to CSV file')
    np.savetxt(prefix + '_fd.csv', np.vstack((np.arange(len(fd)), fd)).T, delimiter=',', header='tr,fd', comments='')

    # whole brain correlation (global correlation)
    # https://afni.nimh.nih.gov/pub/dist/doc/program_help/@compute_gcor.html
    # calculate L2 norm of each time series
    logging.info('Running whole brain correlation')
    dims = func.shape
    func = func - np.tile(np.mean(func, axis=1), (dims[1], 1)).T # demean

    # calculate l2 norm, replacing zeros with smallest possible float
    norm = np.linalg.norm(func, ord=2, axis=1)
    norm[np.where(norm == 0)[0]] = np.finfo(np.float).min

    # corr: devide by norm, take mean, take dot of func & mean
    func = func / np.tile(norm, (dims[1], 1)).T
    avgUnitTs = np.mean(func, axis=0)
    corr = np.dot(func, avgUnitTs)
    gcorr = np.sum(avgUnitTs**2)

    idx, aff, hdr, dims = qc.utilities.get_mask_dims('{t}/mask.nii.gz'.format(t=tmpdir))
    out = np.zeros((dims[0]*dims[1]*dims[2], 1))
    out[idx, 0] = corr
    out = out.reshape((dims[0], dims[1], dims[2], 1))
    out = nib.nifti1.Nifti1Image(out, aff)
    out.update_header()
    out.header_class(extensions=())
    out.to_filename(prefix + '_corr.nii.gz')

    # write out assorted statistics
    logging.info('Writing statistics into csv')
    with open(prefix + '_stats.csv', 'wb') as f:
        f.write('mean_fd,n_bad_fd,%_bad_fd,global_corr,mean_sfnr\n{},{},{},{},{}'.format(
                 np.mean(fd), numBadFd, pctBadFd, gcorr, sfnr))

    # run metrics from qascripts toolchain
    logging.info('Running metrics from qcscripts toolchain')
    qc.utilities.run('cp {nifti} {t}/raw.nii.gz'.format(nifti=nifti, t=tmpdir))

    logging.info('Running qa_bold_v2')
    qc.utilities.run('qa_bold_v2.sh {t}/raw.nii.gz {t}/qc_bold.csv'.format(t=tmpdir))

    logging.info('Moving qc_bold.csv into qc folder')
    qc.utilities.run('mv {t}/qc_bold.csv {prefix}_qascripts_bold.csv'.format(t=tmpdir, prefix=prefix))

    logging.info('Finished processing...')

    shutil.rmtree(tmpdir)

if __name__ == '__main__':
    if len(sys.argv) == 3:
        main(sys.argv[1], sys.argv[2])
    else:
        print(__doc__)

